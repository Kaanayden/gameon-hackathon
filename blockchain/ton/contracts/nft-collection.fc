#include "imports/stdlib.fc";
#include "imports/op-codes.fc";
#include "imports/params.fc";

;; NFT Collection Smart Contract

;; Define constants for coordinate limits
const MIN_COORD = 1;
const MAX_COORD = 20;

;; Storage Scheme
;; default#_ royalty_factor:uint16 royalty_base:uint16 royalty_address:MsgAddress = RoyaltyParams;
;; storage#_ owner_address:MsgAddress
;;           next_item_index:uint64
;;           coordinates_mapping:^Cell ;; Mapping from (x,y) to owner_address
;;           ^[collection_content:^Cell common_content:^Cell]
;;           nft_item_code:^Cell
;;           royalty_params:^RoyaltyParams
;;           = Storage;

;; Helper function to encode (x, y) into a single key
int encode_coordinates(int x, int y) inline {
    return x * 100 + y;
}

;; Recursive function to get owner by coordinates
slice get_owner_by_coordinates_rec(slice parser, int key) inline {
    if (parser.end_bits()) {
        return null();
    }
    int current_key = parser~load_uint(32);
    slice current_owner = parser~load_msg_addr();
    if (current_key == key) {
        return current_owner;
    }
    return get_owner_by_coordinates_rec(parser, key);
}

;; Get owner by coordinates
slice get_owner_by_coordinates(cell coordinates_mapping, int x, int y) inline {
    int key = encode_coordinates(x, y);
    var parser = coordinates_mapping.begin_parse();
    return get_owner_by_coordinates_rec(parser, key);
}

;; Helper function to add a coordinate mapping
cell add_coordinates_mapping(cell coordinates_mapping, int x, int y, slice owner_address) inline {
    int key = encode_coordinates(x, y);
    cell new_pair = begin_cell()
        .store_uint(key, 32)            ;; Key: encoded (x, y)
        .store_slice(owner_address)    ;; Value: owner address
        .end_cell();
    return begin_cell()
        .store_ref(new_pair)
        .store_ref(coordinates_mapping)
        .end_cell();
}

;; Load data from storage
(slice, int, cell, cell, cell, cell) load_data() inline {
    var ds = get_data().begin_parse();
    return (
        ds~load_msg_addr(),        ;; owner_address
        ds~load_uint(64),          ;; next_item_index
        ds~load_ref(),             ;; coordinates_mapping
        ds~load_ref(),             ;; content
        ds~load_ref(),             ;; nft_item_code
        ds~load_ref()              ;; royalty_params
    );
}

;; Save data to storage
() save_data(slice owner_address, int next_item_index, cell coordinates_mapping, cell content, cell nft_item_code, cell royalty_params) impure inline {
    set_data(
        begin_cell()
            .store_slice(owner_address)
            .store_uint(next_item_index, 64)
            .store_ref(coordinates_mapping)
            .store_ref(content)
            .store_ref(nft_item_code)
            .store_ref(royalty_params)
            .end_cell()
    );
}

;; Calculate NFT item state initialization with coordinates
cell calculate_nft_item_state_init(int item_index, cell nft_item_code, int x, int y) inline {
    cell data = begin_cell()
        .store_uint(item_index, 64)
        .store_slice(my_address())
        .store_uint(x, 8) ;; Store x coordinate
        .store_uint(y, 8) ;; Store y coordinate
        .end_cell();
    return begin_cell()
        .store_uint(0, 2)
        .store_dict(nft_item_code)
        .store_dict(data)
        .store_uint(0, 1)
        .end_cell();
}

;; Calculate NFT item address
slice calculate_nft_item_address(int wc, cell state_init) inline {
    return begin_cell()
        .store_uint(4, 3)
        .store_int(wc, 8)
        .store_uint(cell_hash(state_init), 256)
        .end_cell()
        .begin_parse();
}

;; Deploy a new NFT item with coordinates
() deploy_nft_item(int item_index, cell nft_item_code, int amount, cell nft_content, int x, int y, ref cell coordinates_mapping) impure {
    ;; Ensure x and y are within the valid range
    throw_unless(400, x >= MIN_COORD && x <= MAX_COORD && y >= MIN_COORD && y <= MAX_COORD);

    ;; Check if the coordinates are already taken
    slice existing_owner = get_owner_by_coordinates(*coordinates_mapping, x, y);
    throw_unless(401, slice_null?(existing_owner)); ;; Coordinates must be free

    ;; Initialize the NFT item state
    cell state_init = calculate_nft_item_state_init(item_index, nft_item_code, x, y);
    slice nft_address = calculate_nft_item_address(workchain(), state_init);

    ;; Update the coordinates mapping with the new NFT's coordinates and owner
    *coordinates_mapping = add_coordinates_mapping(*coordinates_mapping, x, y, my_address());

    ;; Create and send the deployment message
    var msg = begin_cell()
        .store_uint(0x18, 6)
        .store_slice(nft_address)
        .store_coins(amount)
        .store_uint(0, 64) ;; Adjusted the bit size appropriately (Assuming 0 as a placeholder)
        .store_ref(state_init)
        .store_ref(nft_content)
        .end_cell();
    send_raw_message(msg, 1); ;; Pay transfer fees separately, revert on errors
}

;; Send royalty parameters
() send_royalty_params(slice to_address, int query_id, slice data) impure inline {
    var msg = begin_cell()
        .store_uint(0x10, 6) ;; nobounce - int_msg_info$0 ihr_disabled:Bool bounce:Bool bounced:Bool packages:MsgAddress -> 011000
        .store_slice(to_address)
        .store_coins(0)
        .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1) ;; Adjust bit sizes as needed
        .store_uint(op::report_royalty_params(), 32)
        .store_uint(query_id, 64)
        .store_slice(data)
        .end_cell();
    send_raw_message(msg, 64); ;; Carry all the remaining value of the inbound message
}

;; Receive internal messages
() recv_internal(cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; Ignore empty messages
        return ();
    }
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);

    if (flags & 1) { ;; Ignore all bounced messages
        return ();
    }
    slice sender_address = cs~load_msg_addr();

    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    var (owner_address, next_item_index, coordinates_mapping, content, nft_item_code, royalty_params) = load_data();

    if (op == op::get_royalty_params()) {
        send_royalty_params(sender_address, query_id, royalty_params.begin_parse());
        return ();
    }

    ;; Modification - anybody can deploy with coordinates
    if (op == 1) { ;; Deploy new NFT
        int item_index = in_msg_body~load_uint(64);
        int x = in_msg_body~load_uint(8);
        int y = in_msg_body~load_uint(8);
        throw_unless(402, item_index <= next_item_index);
        var is_last = item_index == next_item_index;
        deploy_nft_item(item_index, nft_item_code, in_msg_body~load_coins(), in_msg_body~load_ref(), x, y, &coordinates_mapping);
        if (is_last) {
            next_item_index += 1;
            save_data(owner_address, next_item_index, coordinates_mapping, content, nft_item_code, royalty_params);
        }
        return ();
    }

    if (op == 2) { ;; Batch deploy of new NFTs
        int counter = 0;
        cell deploy_list = in_msg_body~load_ref();
        while (!deploy_list.begin_parse().end_bits()) {
            var (item, f?) = deploy_list~load_dict_item(64);
            if (f?) {
                int item_index = item~load_uint(64);
                int x = item~load_uint(8);
                int y = item~load_uint(8);
                int amount = item~load_coins();
                cell nft_content = item~load_ref();

                counter += 1;
                if (counter > 250) { ;; Limit due to action list size
                    throw(399);
                }

                throw_unless(403 + counter, item_index <= next_item_index);
                deploy_nft_item(item_index, nft_item_code, amount, nft_content, x, y, &coordinates_mapping);
                if (item_index == next_item_index) {
                    next_item_index += 1;
                }
            } else {
                break;
            }
        }
        save_data(owner_address, next_item_index, coordinates_mapping, content, nft_item_code, royalty_params);
        return ();
    }

    throw_unless(401, equal_slices(sender_address, owner_address));

    if (op == 3) { ;; Change owner
        slice new_owner = in_msg_body~load_msg_addr();
        save_data(new_owner, next_item_index, coordinates_mapping, content, nft_item_code, royalty_params);
        return ();
    }
    throw(0xffff);
}

;; Getter Methods

;; Get collection data
(int, cell, slice) get_collection_data() method_id {
    var (owner_address, next_item_index, coordinates_mapping, content, _, _) = load_data();
    slice cs = content.begin_parse();
    return (next_item_index, cs~load_ref(), owner_address);
}

;; Get NFT address by index
slice get_nft_address_by_index(int index) method_id {
    var (_, _, _, nft_item_code, _) = load_data();
    cell state_init = calculate_nft_item_state_init(index, nft_item_code, 0, 0); ;; x and y are not used here
    return calculate_nft_item_address(0, state_init);
}

;; Get royalty parameters
(int, int, slice) royalty_params() method_id {
    var (_, _, _, _, royalty) = load_data();
    slice rs = royalty.begin_parse();
    return (rs~load_uint(16), rs~load_uint(16), rs~load_msg_addr());
}

;; Get NFT content
cell get_nft_content(int index, cell individual_nft_content) method_id {
    var (_, _, content, _, _) = load_data();
    slice cs = content.begin_parse();
    cs~load_ref();
    slice common_content = cs~load_ref().begin_parse();
    return begin_cell()
        .store_uint(1, 8) ;; Offchain tag
        .store_slice(common_content)
        .store_ref(individual_nft_content)
        .end_cell();
}

;; Get owner by coordinates
slice get_owner_by_coordinates_method(int x, int y) method_id {
    var (_, _, coordinates_mapping, _, _, _) = load_data();
    return get_owner_by_coordinates(coordinates_mapping, x, y);
}